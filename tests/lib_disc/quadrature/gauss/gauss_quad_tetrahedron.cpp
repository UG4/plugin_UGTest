/*
 * Copyright (c) 2011-2013:  G-CSC, Goethe University Frankfurt
 * 
 * This file is part of UG4.
 * 
 * UG4 is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License version 3 (as published by the
 * Free Software Foundation) with the following additional attribution
 * requirements (according to LGPL/GPL v3 §7):
 * 
 * (1) The following notice must be displayed in the Appropriate Legal Notices
 * of covered and combined works: "Based on UG4 (www.ug4.org/license)".
 * 
 * (2) The following notice must be displayed at a prominent place in the
 * terminal output of covered works: "Based on UG4 (www.ug4.org/license)".
 * 
 * (3) The following bibliography is recommended for citation and must be
 * preserved in all covered files:
 * "Reiter, S., Vogel, A., Heppner, I., Rupp, M., and Wittum, G. A massively
 *   parallel geometric multigrid solver on hierarchically distributed grids.
 *   Computing and visualization in science 16, 4 (2013), 151-164"
 * "Vogel, A., Reiter, S., Rupp, M., Nägel, A., and Wittum, G. UG4 -- a novel
 *   flexible software system for simulating pde based models on high performance
 *   computers. Computing and visualization in science 16, 4 (2013), 165-179"
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 */

//  This file is parsed from UG 3.9.
//  It provides the Gauss Quadratures for a reference tetrahedron.


#include "../quadrature.h"
#include "gauss_quad_tetrahedron.h"

namespace ug{

template <>
number GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 0>, 3, 0, 7>::m_vWeight[7] =
{
1./6. * 0.14285714285714300000000000000000,
1./6. * 0.14285714285714300000000000000000,
1./6. * 0.14285714285714300000000000000000,
1./6. * 0.14285714285714300000000000000000,
1./6. * 0.14285714285714300000000000000000,
1./6. * 0.14285714285714300000000000000000,
1./6. * 0.14285714285714300000000000000000
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 0>, 3, 0, 7>::m_vPoint[7] =
{
MathVector<3>(0.25000000000000000000000000000000, 0.25000000000000000000000000000000, 0.25000000000000000000000000000000),
MathVector<3>(0.10000000000000000000000000000000, 0.10000000000000000000000000000000, 0.40000000000000000000000000000000),
MathVector<3>(0.10000000000000000000000000000000, 0.40000000000000000000000000000000, 0.10000000000000000000000000000000),
MathVector<3>(0.40000000000000000000000000000000, 0.10000000000000000000000000000000, 0.10000000000000000000000000000000),
MathVector<3>(0.10000000000000000000000000000000, 0.40000000000000000000000000000000, 0.40000000000000000000000000000000),
MathVector<3>(0.40000000000000000000000000000000, 0.10000000000000000000000000000000, 0.40000000000000000000000000000000),
MathVector<3>(0.40000000000000000000000000000000, 0.40000000000000000000000000000000, 0.10000000000000000000000000000000)
};

template <>
number GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 1>, 3, 1, 1>::m_vWeight[1] =
{
1./6. * 1.00000000000000000000000000000000
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 1>, 3, 1, 1>::m_vPoint[1] =
{
MathVector<3>(0.25000000000000000000000000000000, 0.25000000000000000000000000000000, 0.25000000000000000000000000000000)
};

template <>
number GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 2>, 3, 2, 4>::m_vWeight[4] =
{
1./6. * 0.25000000000000000000000000000000,
1./6. * 0.25000000000000000000000000000000,
1./6. * 0.25000000000000000000000000000000,
1./6. * 0.25000000000000000000000000000000
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 2>, 3, 2, 4>::m_vPoint[4] =
{
MathVector<3>(0.58541020000000000000000000000000, 0.13819660000000000000000000000000, 0.13819660000000000000000000000000),
MathVector<3>(0.13819660000000000000000000000000, 0.58541020000000000000000000000000, 0.13819660000000000000000000000000),
MathVector<3>(0.13819660000000000000000000000000, 0.13819660000000000000000000000000, 0.58541020000000000000000000000000),
MathVector<3>(0.13819660000000000000000000000000, 0.13819660000000000000000000000000, 0.13819660000000000000000000000000)

// MORE ACCURATE
//MathVector<3>(0.5854101966249685, 0.1381966011250105, 0.1381966011250105),
//MathVector<3>(0.1381966011250105, 0.5854101966249685, 0.1381966011250105),
//MathVector<3>(0.1381966011250105, 0.1381966011250105, 0.5854101966249685),
//MathVector<3>(0.1381966011250105, 0.1381966011250105, 0.1381966011250105)
};

template <>
number GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 3>, 3, 3, 8>::m_vWeight[8] =
{
1./6. * 0.02500000000000000000000000000000,
1./6. * 0.02500000000000000000000000000000,
1./6. * 0.02500000000000000000000000000000,
1./6. * 0.02500000000000000000000000000000,
1./6. * 0.22500000000000000000000000000000,
1./6. * 0.22500000000000000000000000000000,
1./6. * 0.22500000000000000000000000000000,
1./6. * 0.22500000000000000000000000000000
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 3>, 3, 3, 8>::m_vPoint[8] =
{
MathVector<3>(0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(1.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 1.00000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 1.00000000000000000000000000000000),
MathVector<3>(0.33333333333300000000000000000000, 0.33333333333300000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(0.33333333333300000000000000000000, 0.00000000000000000000000000000000, 0.33333333333300000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 0.33333333333300000000000000000000, 0.33333333333300000000000000000000),
MathVector<3>(0.33333333333300000000000000000000, 0.33333333333300000000000000000000, 0.33333333333300000000000000000000)
};

template <>
number GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 5>, 3, 5, 15>::m_vWeight[15] =
{
1./6. * 0.11851852000000000000000000000000,
1./6. * 0.07193708400000000000000000000000,
1./6. * 0.07193708400000000000000000000000,
1./6. * 0.07193708400000000000000000000000,
1./6. * 0.07193708400000000000000000000000,
1./6. * 0.06906820700000000000000000000000,
1./6. * 0.06906820700000000000000000000000,
1./6. * 0.06906820700000000000000000000000,
1./6. * 0.06906820700000000000000000000000,
1./6. * 0.05291005300000000000000000000000,
1./6. * 0.05291005300000000000000000000000,
1./6. * 0.05291005300000000000000000000000,
1./6. * 0.05291005300000000000000000000000,
1./6. * 0.05291005300000000000000000000000,
1./6. * 0.05291005300000000000000000000000
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 5>, 3, 5, 15>::m_vPoint[15] =
{
MathVector<3>(0.25000000000000000000000000000000, 0.25000000000000000000000000000000, 0.25000000000000000000000000000000),
MathVector<3>(0.09197107800000000000000000000000, 0.09197107800000000000000000000000, 0.09197107800000000000000000000000),
MathVector<3>(0.72408677000000000000000000000000, 0.09197107800000000000000000000000, 0.09197107800000000000000000000000),
MathVector<3>(0.09197107800000000000000000000000, 0.72408677000000000000000000000000, 0.09197107800000000000000000000000),
MathVector<3>(0.09197107800000000000000000000000, 0.09197107800000000000000000000000, 0.72408677000000000000000000000000),
MathVector<3>(0.31979363000000000000000000000000, 0.31979363000000000000000000000000, 0.31979363000000000000000000000000),
MathVector<3>(0.04061911700000000000000000000000, 0.31979363000000000000000000000000, 0.31979363000000000000000000000000),
MathVector<3>(0.31979363000000000000000000000000, 0.04061911700000000000000000000000, 0.31979363000000000000000000000000),
MathVector<3>(0.31979363000000000000000000000000, 0.31979363000000000000000000000000, 0.04061911700000000000000000000000),
MathVector<3>(0.44364917000000000000000000000000, 0.05635083300000000000000000000000, 0.05635083300000000000000000000000),
MathVector<3>(0.05635083300000000000000000000000, 0.44364917000000000000000000000000, 0.05635083300000000000000000000000),
MathVector<3>(0.05635083300000000000000000000000, 0.05635083300000000000000000000000, 0.44364917000000000000000000000000),
MathVector<3>(0.44364917000000000000000000000000, 0.44364917000000000000000000000000, 0.05635083300000000000000000000000),
MathVector<3>(0.44364917000000000000000000000000, 0.05635083300000000000000000000000, 0.44364917000000000000000000000000),
MathVector<3>(0.05635083300000000000000000000000, 0.44364917000000000000000000000000, 0.44364917000000000000000000000000)
};

template <>
number GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 6>, 3, 6, 24>::m_vWeight[24] =
{
1./6. * 0.03992275025816749209969062755748,
1./6. * 0.03992275025816749209969062755748,
1./6. * 0.03992275025816749209969062755748,
1./6. * 0.03992275025816749209969062755748,
1./6. * 0.01007721105532064294801323744594,
1./6. * 0.01007721105532064294801323744594,
1./6. * 0.01007721105532064294801323744594,
1./6. * 0.01007721105532064294801323744594,
1./6. * 0.05535718154365472209515327785373,
1./6. * 0.05535718154365472209515327785373,
1./6. * 0.05535718154365472209515327785373,
1./6. * 0.05535718154365472209515327785373,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429,
1./6. * 0.04821428571428571428571428571429
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 6>, 3, 6, 24>::m_vPoint[24] =
{
MathVector<3>(0.21460287125915202928883921938628, 0.21460287125915202928883921938628, 0.21460287125915202928883921938628),
MathVector<3>(0.35619138622254391213348234184115, 0.21460287125915202928883921938628, 0.21460287125915202928883921938628),
MathVector<3>(0.21460287125915202928883921938628, 0.35619138622254391213348234184115, 0.21460287125915202928883921938628),
MathVector<3>(0.21460287125915202928883921938628, 0.21460287125915202928883921938628, 0.35619138622254391213348234184115),
MathVector<3>(0.04067395853461135311557944895641, 0.04067395853461135311557944895641, 0.04067395853461135311557944895641),
MathVector<3>(0.87797812439616594065326165313077, 0.04067395853461135311557944895641, 0.04067395853461135311557944895641),
MathVector<3>(0.04067395853461135311557944895641, 0.87797812439616594065326165313077, 0.04067395853461135311557944895641),
MathVector<3>(0.04067395853461135311557944895641, 0.04067395853461135311557944895641, 0.87797812439616594065326165313077),
MathVector<3>(0.32233789014227551034399447076249, 0.32233789014227551034399447076249, 0.32233789014227551034399447076249),
MathVector<3>(0.03298632957317346896801658771252, 0.32233789014227551034399447076249, 0.32233789014227551034399447076249),
MathVector<3>(0.32233789014227551034399447076249, 0.03298632957317346896801658771252, 0.32233789014227551034399447076249),
MathVector<3>(0.32233789014227551034399447076249, 0.32233789014227551034399447076249, 0.03298632957317346896801658771252),
MathVector<3>(0.06366100187501752529923552760573, 0.06366100187501752529923552760573, 0.26967233145831580803409780572761),
MathVector<3>(0.06366100187501752529923552760573, 0.26967233145831580803409780572761, 0.06366100187501752529923552760573),
MathVector<3>(0.26967233145831580803409780572761, 0.06366100187501752529923552760573, 0.06366100187501752529923552760573),
MathVector<3>(0.06366100187501752529923552760573, 0.06366100187501752529923552760573, 0.60300566479164914136743113906094),
MathVector<3>(0.06366100187501752529923552760573, 0.60300566479164914136743113906094, 0.06366100187501752529923552760573),
MathVector<3>(0.60300566479164914136743113906094, 0.06366100187501752529923552760573, 0.06366100187501752529923552760573),
MathVector<3>(0.06366100187501752529923552760573, 0.26967233145831580803409780572761, 0.60300566479164914136743113906094),
MathVector<3>(0.06366100187501752529923552760573, 0.60300566479164914136743113906094, 0.26967233145831580803409780572761),
MathVector<3>(0.26967233145831580803409780572761, 0.06366100187501752529923552760573, 0.60300566479164914136743113906094),
MathVector<3>(0.60300566479164914136743113906094, 0.06366100187501752529923552760573, 0.26967233145831580803409780572761),
MathVector<3>(0.26967233145831580803409780572761, 0.60300566479164914136743113906094, 0.06366100187501752529923552760573),
MathVector<3>(0.60300566479164914136743113906094, 0.26967233145831580803409780572761, 0.06366100187501752529923552760573)
};

template <>
number GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 7>, 3, 7, 31>::m_vWeight[31] =
{
1./6. * 0.00582010582010582010582010582011,
1./6. * 0.00582010582010582010582010582011,
1./6. * 0.00582010582010582010582010582011,
1./6. * 0.00582010582010582010582010582011,
1./6. * 0.00582010582010582010582010582011,
1./6. * 0.00582010582010582010582010582011,
1./6. * 0.10958534079665292174720941138968,
1./6. * 0.06359964914648212149848324912716,
1./6. * 0.06359964914648212149848324912716,
1./6. * 0.06359964914648212149848324912716,
1./6. * 0.06359964914648212149848324912716,
1./6. * -0.37510644068599111014882208495676,
1./6. * -0.37510644068599111014882208495676,
1./6. * -0.37510644068599111014882208495676,
1./6. * -0.37510644068599111014882208495676,
1./6. * 0.02934855157844099630877457822026,
1./6. * 0.02934855157844099630877457822026,
1./6. * 0.02934855157844099630877457822026,
1./6. * 0.02934855157844099630877457822026,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392,
1./6. * 0.16534391534391534391534391534392
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 7>, 3, 7, 31>::m_vPoint[31] =
{
MathVector<3>(0.50000000000000000000000000000000, 0.50000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(0.50000000000000000000000000000000, 0.00000000000000000000000000000000, 0.50000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 0.50000000000000000000000000000000, 0.50000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.50000000000000000000000000000000),
MathVector<3>(0.00000000000000000000000000000000, 0.50000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(0.50000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000),
MathVector<3>(0.25000000000000000000000000000000, 0.25000000000000000000000000000000, 0.25000000000000000000000000000000),
MathVector<3>(0.07821319233031806437399425083755, 0.07821319233031806437399425083755, 0.07821319233031806437399425083755),
MathVector<3>(0.76536042300904580687801724748734, 0.07821319233031806437399425083755, 0.07821319233031806437399425083755),
MathVector<3>(0.07821319233031806437399425083755, 0.76536042300904580687801724748734, 0.07821319233031806437399425083755),
MathVector<3>(0.07821319233031806437399425083755, 0.07821319233031806437399425083755, 0.76536042300904580687801724748734),
MathVector<3>(0.12184321666390517465215637268482, 0.12184321666390517465215637268482, 0.12184321666390517465215637268482),
MathVector<3>(0.63447035000828447604353088194555, 0.12184321666390517465215637268482, 0.12184321666390517465215637268482),
MathVector<3>(0.12184321666390517465215637268482, 0.63447035000828447604353088194555, 0.12184321666390517465215637268482),
MathVector<3>(0.12184321666390517465215637268482, 0.12184321666390517465215637268482, 0.63447035000828447604353088194555),
MathVector<3>(0.33253916444642062415292382315771, 0.33253916444642062415292382315771, 0.33253916444642062415292382315771),
MathVector<3>(0.00238250666073812754122853052688, 0.33253916444642062415292382315771, 0.33253916444642062415292382315771),
MathVector<3>(0.33253916444642062415292382315771, 0.00238250666073812754122853052688, 0.33253916444642062415292382315771),
MathVector<3>(0.33253916444642062415292382315771, 0.33253916444642062415292382315771, 0.00238250666073812754122853052688),
MathVector<3>(0.10000000000000000000000000000000, 0.10000000000000000000000000000000, 0.20000000000000000000000000000000),
MathVector<3>(0.10000000000000000000000000000000, 0.20000000000000000000000000000000, 0.10000000000000000000000000000000),
MathVector<3>(0.20000000000000000000000000000000, 0.10000000000000000000000000000000, 0.10000000000000000000000000000000),
MathVector<3>(0.10000000000000000000000000000000, 0.10000000000000000000000000000000, 0.60000000000000000000000000000000),
MathVector<3>(0.10000000000000000000000000000000, 0.60000000000000000000000000000000, 0.10000000000000000000000000000000),
MathVector<3>(0.60000000000000000000000000000000, 0.10000000000000000000000000000000, 0.10000000000000000000000000000000),
MathVector<3>(0.10000000000000000000000000000000, 0.20000000000000000000000000000000, 0.60000000000000000000000000000000),
MathVector<3>(0.10000000000000000000000000000000, 0.60000000000000000000000000000000, 0.20000000000000000000000000000000),
MathVector<3>(0.60000000000000000000000000000000, 0.10000000000000000000000000000000, 0.20000000000000000000000000000000),
MathVector<3>(0.20000000000000000000000000000000, 0.10000000000000000000000000000000, 0.60000000000000000000000000000000),
MathVector<3>(0.20000000000000000000000000000000, 0.60000000000000000000000000000000, 0.10000000000000000000000000000000),
MathVector<3>(0.60000000000000000000000000000000, 0.20000000000000000000000000000000, 0.10000000000000000000000000000000)
};

template <>
number GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 8>, 3, 8, 43>::m_vWeight[43] =
{
1./6. * -0.12300113195183949504351910658577,
1./6. * 0.08550183493720140749063844921523,
1./6. * 0.08550183493720140749063844921523,
1./6. * 0.08550183493720140749063844921523,
1./6. * 0.08550183493720140749063844921523,
1./6. * 0.01180219987880340592537682054673,
1./6. * 0.01180219987880340592537682054673,
1./6. * 0.01180219987880340592537682054673,
1./6. * 0.01180219987880340592537682054673,
1./6. * 0.00101900465455732427902646740022,
1./6. * 0.00101900465455732427902646740022,
1./6. * 0.00101900465455732427902646740022,
1./6. * 0.00101900465455732427902646740022,
1./6. * 0.02747810294680369080446108677784,
1./6. * 0.02747810294680369080446108677784,
1./6. * 0.02747810294680369080446108677784,
1./6. * 0.02747810294680369080446108677784,
1./6. * 0.02747810294680369080446108677784,
1./6. * 0.02747810294680369080446108677784,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.03422691485209151104081535176698,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552,
1./6. * 0.01284311484697255557890011800552
};

template <>
MathVector<3> GaussQuadBase<GaussQuadrature<ReferenceTetrahedron, 8>, 3, 8, 43>::m_vPoint[43] =
{
MathVector<3>(0.25000000000000000000000000000000, 0.25000000000000000000000000000000, 0.25000000000000000000000000000000),
MathVector<3>(0.20682993161067320408398090002496, 0.20682993161067320408398090002496, 0.20682993161067320408398090002496),
MathVector<3>(0.37951020516798038774805729992512, 0.20682993161067320408398090002496, 0.20682993161067320408398090002496),
MathVector<3>(0.20682993161067320408398090002496, 0.37951020516798038774805729992512, 0.20682993161067320408398090002496),
MathVector<3>(0.20682993161067320408398090002496, 0.20682993161067320408398090002496, 0.37951020516798038774805729992512),
MathVector<3>(0.08210358831054672309060580787142, 0.08210358831054672309060580787142, 0.08210358831054672309060580787142),
MathVector<3>(0.75368923506835983072818257638574, 0.08210358831054672309060580787142, 0.08210358831054672309060580787142),
MathVector<3>(0.08210358831054672309060580787142, 0.75368923506835983072818257638574, 0.08210358831054672309060580787142),
MathVector<3>(0.08210358831054672309060580787142, 0.08210358831054672309060580787142, 0.75368923506835983072818257638574),
MathVector<3>(0.00578195050519799725317663886414, 0.00578195050519799725317663886414, 0.00578195050519799725317663886414),
MathVector<3>(0.98265414848440600824047008340757, 0.00578195050519799725317663886414, 0.00578195050519799725317663886414),
MathVector<3>(0.00578195050519799725317663886414, 0.98265414848440600824047008340757, 0.00578195050519799725317663886414),
MathVector<3>(0.00578195050519799725317663886414, 0.00578195050519799725317663886414, 0.98265414848440600824047008340757),
MathVector<3>(0.05053274001889422442562452855791, 0.05053274001889422442562452855791, 0.44946725998110577557437547144209),
MathVector<3>(0.05053274001889422442562452855791, 0.44946725998110577557437547144209, 0.05053274001889422442562452855791),
MathVector<3>(0.44946725998110577557437547144209, 0.05053274001889422442562452855791, 0.05053274001889422442562452855791),
MathVector<3>(0.05053274001889422442562452855791, 0.44946725998110577557437547144209, 0.44946725998110577557437547144209),
MathVector<3>(0.44946725998110577557437547144209, 0.05053274001889422442562452855791, 0.44946725998110577557437547144209),
MathVector<3>(0.44946725998110577557437547144209, 0.44946725998110577557437547144209, 0.05053274001889422442562452855791),
MathVector<3>(0.22906653611681113960040885455475, 0.22906653611681113960040885455475, 0.03563958278853404371691739695061),
MathVector<3>(0.22906653611681113960040885455475, 0.03563958278853404371691739695061, 0.22906653611681113960040885455475),
MathVector<3>(0.03563958278853404371691739695061, 0.22906653611681113960040885455475, 0.22906653611681113960040885455475),
MathVector<3>(0.22906653611681113960040885455475, 0.22906653611681113960040885455475, 0.50622734497784367708226489393988),
MathVector<3>(0.22906653611681113960040885455475, 0.50622734497784367708226489393988, 0.22906653611681113960040885455475),
MathVector<3>(0.50622734497784367708226489393988, 0.22906653611681113960040885455475, 0.22906653611681113960040885455475),
MathVector<3>(0.22906653611681113960040885455475, 0.03563958278853404371691739695061, 0.50622734497784367708226489393988),
MathVector<3>(0.22906653611681113960040885455475, 0.50622734497784367708226489393988, 0.03563958278853404371691739695061),
MathVector<3>(0.50622734497784367708226489393988, 0.22906653611681113960040885455475, 0.03563958278853404371691739695061),
MathVector<3>(0.03563958278853404371691739695061, 0.22906653611681113960040885455475, 0.50622734497784367708226489393988),
MathVector<3>(0.03563958278853404371691739695061, 0.50622734497784367708226489393988, 0.22906653611681113960040885455475),
MathVector<3>(0.50622734497784367708226489393988, 0.03563958278853404371691739695061, 0.22906653611681113960040885455475),
MathVector<3>(0.03660774955319742367877385463271, 0.03660774955319742367877385463271, 0.19048604193463345569943328531510),
MathVector<3>(0.03660774955319742367877385463271, 0.19048604193463345569943328531510, 0.03660774955319742367877385463271),
MathVector<3>(0.19048604193463345569943328531510, 0.03660774955319742367877385463271, 0.03660774955319742367877385463271),
MathVector<3>(0.03660774955319742367877385463271, 0.03660774955319742367877385463271, 0.73629845895897169694301900541948),
MathVector<3>(0.03660774955319742367877385463271, 0.73629845895897169694301900541948, 0.03660774955319742367877385463271),
MathVector<3>(0.73629845895897169694301900541948, 0.03660774955319742367877385463271, 0.03660774955319742367877385463271),
MathVector<3>(0.03660774955319742367877385463271, 0.19048604193463345569943328531510, 0.73629845895897169694301900541948),
MathVector<3>(0.03660774955319742367877385463271, 0.73629845895897169694301900541948, 0.19048604193463345569943328531510),
MathVector<3>(0.73629845895897169694301900541948, 0.03660774955319742367877385463271, 0.19048604193463345569943328531510),
MathVector<3>(0.19048604193463345569943328531510, 0.03660774955319742367877385463271, 0.73629845895897169694301900541948),
MathVector<3>(0.19048604193463345569943328531510, 0.73629845895897169694301900541948, 0.03660774955319742367877385463271),
MathVector<3>(0.73629845895897169694301900541948, 0.19048604193463345569943328531510, 0.03660774955319742367877385463271)
};




template <>
FlexGaussQuadrature<ReferenceTetrahedron>::FlexGaussQuadrature(int order)
{
	switch(order)
	{
	case 0:
		m_order = GaussQuadrature<ReferenceTetrahedron, 0>::order();
		m_numPoints = GaussQuadrature<ReferenceTetrahedron, 0>::size();
		m_pvPoint = GaussQuadrature<ReferenceTetrahedron, 0>::points();
		m_pvWeight = GaussQuadrature<ReferenceTetrahedron, 0>::weights();
		break;

	case 1:
		m_order = GaussQuadrature<ReferenceTetrahedron, 1>::order();
		m_numPoints = GaussQuadrature<ReferenceTetrahedron, 1>::size();
		m_pvPoint = GaussQuadrature<ReferenceTetrahedron, 1>::points();
		m_pvWeight = GaussQuadrature<ReferenceTetrahedron, 1>::weights();
		break;

	case 2:
		m_order = GaussQuadrature<ReferenceTetrahedron, 2>::order();
		m_numPoints = GaussQuadrature<ReferenceTetrahedron, 2>::size();
		m_pvPoint = GaussQuadrature<ReferenceTetrahedron, 2>::points();
		m_pvWeight = GaussQuadrature<ReferenceTetrahedron, 2>::weights();
		break;

	case 3:
		m_order = GaussQuadrature<ReferenceTetrahedron, 3>::order();
		m_numPoints = GaussQuadrature<ReferenceTetrahedron, 3>::size();
		m_pvPoint = GaussQuadrature<ReferenceTetrahedron, 3>::points();
		m_pvWeight = GaussQuadrature<ReferenceTetrahedron, 3>::weights();
		break;

	case 4:
	case 5:
		m_order = GaussQuadrature<ReferenceTetrahedron, 5>::order();
		m_numPoints = GaussQuadrature<ReferenceTetrahedron, 5>::size();
		m_pvPoint = GaussQuadrature<ReferenceTetrahedron, 5>::points();
		m_pvWeight = GaussQuadrature<ReferenceTetrahedron, 5>::weights();
		break;

	case 6:
		m_order = GaussQuadrature<ReferenceTetrahedron, 6>::order();
		m_numPoints = GaussQuadrature<ReferenceTetrahedron, 6>::size();
		m_pvPoint = GaussQuadrature<ReferenceTetrahedron, 6>::points();
		m_pvWeight = GaussQuadrature<ReferenceTetrahedron, 6>::weights();
		break;

	case 7:
		m_order = GaussQuadrature<ReferenceTetrahedron, 7>::order();
		m_numPoints = GaussQuadrature<ReferenceTetrahedron, 7>::size();
		m_pvPoint = GaussQuadrature<ReferenceTetrahedron, 7>::points();
		m_pvWeight = GaussQuadrature<ReferenceTetrahedron, 7>::weights();
		break;

	case 8:
		m_order = GaussQuadrature<ReferenceTetrahedron, 8>::order();
		m_numPoints = GaussQuadrature<ReferenceTetrahedron, 8>::size();
		m_pvPoint = GaussQuadrature<ReferenceTetrahedron, 8>::points();
		m_pvWeight = GaussQuadrature<ReferenceTetrahedron, 8>::weights();
		break;

	default: UG_THROW("Order "<<order<<" not available for GaussQuadrature of tetrahedron.");
	}
}
}; // namespace ug

